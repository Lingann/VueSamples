<krpano>
	<!-- krpano 1.16.5 - Default Virtual Tour Skin -->
	<!-- skin_glow - button glowing, if ondown/onup events were needed, then ondown2/onup2 need to be used instead when using this style -->
	<style name="skin_glow"
	       ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
	       onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); "
	       onout="if(skin_lockglow === name, ifnot(pressed, skin_buttonglow(null);delete(skin_lockglow); ));"
	       onup="if(hovering, skin_buttonglow(get(name),0.3), skin_buttonglow(null);delete(skin_lockglow); ); if(onup2, onup2() );"
	       />

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" autoheight="true" y="5" enabled="false" background="false" border="false" css="text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:10px;" textshadow="1" />

	<!-- 在onloaded后面插入 if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));可以一直显示热点名称
	当然还要插入 action name="add_all_the_time_tooltip" <action name="add_tooltip2"> 两项代码 
	distorted="true" 是锁定热点在固定位置不随场景放大缩小而改变位置-->
	<!-- <style name="skin_hotspotstyle" url="vtourskin_hotspot.png" scale="0.5" edge="top" oy="0"
	      distorted="true"中 distorted="true" 是控制热点的位置是否随场景的放大与缩小而改变位置 true 表示不随场景的改变   -->
	<style name="skin_hotspotstyle" url="vtourskin_hotspot.png" scale="0.5" edge="top" oy="0"
	      distorted="true" 
	onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
	onloaded="if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"
		   
	       />

	<!-- 热点链接样式一  -->
	<style name="skin_hotspotstyle1" url="vtourskin_hotspot1.png" crop="0|0|128|112"  framewidth="128"        frameheight="112" frame="0" lastframe="4" scale="0.5" oy="50" 
	onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );" 
	onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );" 
	onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"/>	
	
	<!-- 热点样式以及动作属性 hotspot styles (for Flash and HTML5) -->

	<!-- 热点样式 飞机 -->
	<style name="hotspot_fly_white"
	       url="new_spotd11_gif.png"
	       crop="0|0|128|128"
	       framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	       onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();"	
	       />

	<!--热点样式，白色箭头-->
	<style name="hotspot_arrow_white"
	       url="new_spotd1_gif.png"
	       crop="0|0|128|128"
	       framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	       onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();"	
	       />

	<!--热点样式，白色箭头， 方向左-->
	<style name="hotspot_arrow_left"
		   url="arrow_left.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
		   onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();"
	/>

	<!--热点样式，白色箭头， 方向左-->
	<style name="hotspot_arrow_right"
		   url="arrow_right.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
		   onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();"
	/>

		   <!-- 		   onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"	-->
	<!--热点-样式，白色点-->
	<style name="hotspot_point_white"
	       url="point.png"
	       crop="0||100|100"
	       framewidth="100" frameheight="100" frame="0" lastframe="16" scale="0.5"
		   onclick="js(console.log(get(content))); if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	       onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate_2();"
	       />

	<!-- 热点样式 黑色 -->
	<style name="hotspot_ani_black"
	       url="hotspot_ani_black_64x64x20.png"
	       crop="0|0|64|64"
	       framewidth="64" frameheight="64" frame="0" lastframe="19"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	       onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"	
	       />
		   
	<!-- 热点样式 白色 -->
	<style name="hotspot_ani_white"
	       url="hotspot_ani_white_64x64x20.png"
	       crop="0|0|64|64"
	       framewidth="64" frameheight="64" frame="0" lastframe="19"
	      onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );"
	       onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		    onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"
	       />

	<!--焦点样式 黑色-->
	<style name="hotspot_info_msg"
		   url="hotspot_info.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); ); js(layer.msg(get(content));)"
		   onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"
	/>

	<!--焦点 图片-->
	<style name="hotspot_info_image"
		   url="hotspot_info.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll();); js(layerManager.image(get(src),get(content)));"
		   onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"
	/>

	<!--焦点 视频-->
	<style name="hotspot_info_video"
		   url="hotspot_info.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );js(layerManager.video(get(src)));"
		   onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"
	/>

	<!--焦点 嵌入页面-->
	<style name="hotspot_info_iframe"
		   url="hotspot_info.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24" scale="0.5"
		   onclick="if(linkedscene, tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,MERGE,BLEND(1)); skin_updatescroll(); );js(layerManager.iframe(get(src),get(title)))"
		   onhover="if(skin_settings.tooltips_hotspots, if(linkedscene, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS)) );"
		   onloaded="hotspot_animate();if(distorted,add_tooltip2(get(linkedscene),1),add_all_the_time_tooltip(get(linkedscene),1));"
	/>

	 <!-- 热点样式 END -->
		   
	<!-- 热点动态样式 时间属性 -->
	<action name="hotspot_animate">
		inc(frame,1,get(lastframe),0);
		mul(ypos,frame,frameheight);
		txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
		delayedcall(0.03, if(loaded, hotspot_animate()) );
	</action>

	<action name="hotspot_animate_2">
		inc(frame,1,get(lastframe),0);
		mul(ypos,frame,framewidth);
		txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
		delayedcall(0.08, if(loaded, hotspot_animate_2()));
	</action>
	<!-- 热点样式以及动作属性 END) -->

	<!-- 箭头上添加文字的部分 开始set(plugin[get(tooltipname)].backgroundalpha,0.0);控制背景颜色透明度 0.0 完全透明 0.5 透明度50% -->
 	<action name="add_all_the_time_tooltip">
		txtadd(tooltipname, 'tooltip_', get(name));
		addplugin(get(tooltipname));
		txtadd(plugin[get(tooltipname)].parent, 'hotspot[', get(name), ']');
		set(plugin[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
		set(plugin[get(tooltipname)].align,top);
		set(plugin[get(tooltipname)].edge,bottom);
		set(plugin[get(tooltipname)].x,0);
		set(plugin[get(tooltipname)].y,0);
		set(plugin[get(tooltipname)].autoweight,true);
		set(plugin[get(tooltipname)].autoheight,true);
		set(plugin[get(tooltipname)].background,true);
		set(plugin[get(tooltipname)].backgroundcolor,0x000000);
		set(plugin[get(tooltipname)].roundedge,15);
		set(plugin[get(tooltipname)].backgroundalpha,0.5);
		set(plugin[get(tooltipname)].border,true);
		set(plugin[get(tooltipname)].padding,5);
		set(plugin[get(tooltipname)].glow,4);
		set(plugin[get(tooltipname)].glowcolor,0xFFFFFF);
		set(plugin[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:14px;');
		set(plugin[get(tooltipname)].textshadow,1);
		set(plugin[get(tooltipname)].textshadowrange,6.0);
		set(plugin[get(tooltipname)].textshadowangle,90);
		copy(plugin[get(tooltipname)].html,title);
		set(plugin[get(tooltipname)].enabled,false);
</action>

	<action name="add_tooltip2">
    txtadd(tooltipname, 'tooltip_', get(name));
    addhotspot(get(tooltipname));
    set(hotspot[get(tooltipname)].url,'%SWFPATH%/plugins/textfield.swf');
    set(hotspot[get(tooltipname)].align,bottom);
    set(hotspot[get(tooltipname)].edge,top);
	set(hotspot[get(tooltipname)].distorted,true);
    set(hotspot[get(tooltipname)].ath,get(ath));
    set(hotspot[get(tooltipname)].atv,get(atv));
	set(hotspot[get(tooltipname)].oy,50);
    set(hotspot[get(tooltipname)].width,180);
    set(hotspot[get(tooltipname)].autoheight,true);
    set(hotspot[get(tooltipname)].background,false);
	set(hotspot[get(tooltipname)].backgroundcolor,0x000000);
	set(hotspot[get(tooltipname)].roundedge,10);
	set(hotspot[get(tooltipname)].backgroundalpha,0.0);
    set(hotspot[get(tooltipname)].border,false);
	set(hotspot[get(tooltipname)].glow,4);
	set(hotspot[get(tooltipname)].glowcolor,0xFFFFFF);
    set(hotspot[get(tooltipname)].css,'text-align:center; color:#FFFFFF; font-family:Arial; font-weight:bold; font-size:20px;');
    set(hotspot[get(tooltipname)].textshadow,1);
    set(hotspot[get(tooltipname)].textshadowrange,6.0);
    set(hotspot[get(tooltipname)].textshadowangle,90);
    copy(hotspot[get(tooltipname)].html,scene[get(linkedscene)].title);
    set(hotspot[get(tooltipname)].enabled,false);
</action>

	<!-- Skin Events -->

	<events name="skin_events" keep="true"
	        onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
	        onnewpano="skin_showloading(true); skin_update_scene_infos();"
	        onremovepano="skin_showloading(true);"
	        onloadcomplete="skin_showloading(false);"
	        onresize="skin_onresize();"
	        />

	<events name="skin_events" devices="fullscreensupport"
	        onenterfullscreen="set(layer[skin_btn_fs].crop, '64|576|64|64');"
	        onexitfullscreen="set(layer[skin_btn_fs].crop, '0|576|64|64');"
	        />


	<!-- Alternative small screen layout for mobile devices (override/extend settings) -->


	<!-- Skin Actions -->

	<action name="skin_startup">
		if(device.mobile == false,
			copy(layer[skin_control_bar].y, skin_settings.controlbar_offset);
			copy(layer[skin_control_bar].y_opened, skin_settings.controlbar_offset);
			add(layer[skin_scroll_window].y, layer[skin_control_bar].height, layer[skin_control_bar].y);
			add(layer[skin_scroll_window].y_opened, layer[skin_control_bar].height, layer[skin_control_bar].y_opened);

			if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );

			copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);

			if(skin_settings.thumbs_onhoverscrolling,
				ifnot(device.touchdevice, set(layer[skin_thumbs].draggable, false));
				set(layer[skin_thumbs].onhover_autoscrolling, true);
			  );
		  );

		if(device.android, if(device.flash, set(skin_settings.bingmaps_zoombuttons, false); ));

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		copy(usegyro, skin_settings.gyro);
		if(device.desktop, set(usegyro, false));
		if(device.flash, set(usegyro, false));
		if(usegyro, copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url); );

		if(skin_settings.bingmaps == true,
			set(layer[skin_btn_map].visible, true);
			copy(layer[skin_map].key, skin_settings.bingmaps_key);
			copy(layer[skin_map_zoom_in].visible,  skin_settings.bingmaps_zoombuttons);
			copy(layer[skin_map_zoom_out].visible, skin_settings.bingmaps_zoombuttons);
			if(device.flash, copy(layer[skin_map].url, layer[skin_map].flash_url), copy(layer[skin_map].url, layer[skin_map].html5_url) );
		  ,
			if(device.mobile, copy(layer[skin_btn_gyro].x, layer[skin_btn_map].x) );
		  );
	</action>

	<action name="skin_addthumbs">
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbpadding, skin_settings.thumbs_padding);
		copy(thumbcrop, skin_settings.thumbs_crop);

		if(device.mobile,
			mul(thumbwidth,2);
			mul(thumbheight,2);
			mul(thumbpadding,2);
		  );

		add(thumbxoffset, thumbwidth, thumbpadding);
		mul(thumbxcenter, thumbxoffset, 0.5);
		mul(thumbbarwidth, thumbxoffset, scene.count);
		add(thumbbarwidth, thumbpadding);
		add(thumbbarheight, thumbpadding, thumbheight);
		add(thumbbarheight, thumbpadding);

		if (skin_settings.thumbs_scrollindicator,
			copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
			add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
		);

		copy(layer[skin_thumbs].height, thumbbarheight);
		copy(layer[skin_thumbs].width, thumbbarwidth);

		mul(halfheight, thumbbarheight, 0.5);
		copy(layer[skin_thumbs_scrollleft].y, halfheight);
		copy(layer[skin_thumbs_scrollright].y, halfheight);

		for(set(i,0), i LT scene.count, inc(i),
			txtadd(thumbname,'skin_thumb_',get(i));
			addlayer(get(thumbname));
			copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
			set(layer[get(thumbname)].keep, true);
			set(layer[get(thumbname)].parent, 'skin_thumbs');
			set(layer[get(thumbname)].align, lefttop);
			copy(layer[get(thumbname)].crop, thumbcrop);
			copy(layer[get(thumbname)].width, thumbwidth);
			copy(layer[get(thumbname)].height, thumbheight);
			mul(thumbx, i, thumbxoffset);
			add(thumbx, thumbpadding);
			copy(layer[get(thumbname)].x, thumbx);
			copy(layer[get(thumbname)].y, thumbpadding);
			add(scene[get(i)].thumbx, thumbx, thumbxcenter);
			copy(scene[get(i)].thumby, thumbpadding);
			set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
			set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene), null, MERGE, BLEND(0.5)); );
			if(skin_settings.tooltips_thumbs,
				set(layer[get(thumbname)].onhover, showtext(get(scene[get(linkedscene)].title),SKIN_TOOLTIPS); );
			  );
			if(skin_settings.thumbs_text,
				txtadd(thumbtext, 'skin_thumbtext_', get(i));
				addlayer(get(thumbtext));
				layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
				set(layer[get(thumbtext)].keep, true);
				set(layer[get(thumbtext)].parent, get(thumbname));
				set(layer[get(thumbtext)].html, get(scene[get(i)].title));
			  );
		   );
	</action>

	<action name="skin_addmapspots">
		for(set(i,0), i LT scene.count, inc(i),
			if(scene[get(i)].lat,
				txtadd(spotname, 'spot', get(i));
				txtadd(spotclickevent, 'activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,MERGE,BLEND(1)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
				copy(scene[get(i)].mapspotname, spotname);
				if(skin_settings.tooltips_mapspots, escape(spottitle,get(scene[get(i)].title)); txtadd(spothoverevent,'showtext(',get(spottitle),',SKIN_TOOLTIPS)'); , set(spothoverevent,null); );

				addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), get(spothoverevent));
			  );
		  );
		activatespot(spot0);
		zoomToSpotsExtent();
	</action>

	<action name="skin_onresize">
		mul(mh, stageheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		if(layer[skin_map].state == 'opened', sub(hh,stageheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); copy(layer[skin_map].height, hh); add(mh,hh); );
		set(layer[skin_scroll_layer].y, get(mh));
		ifnot(device.mobile, if(stagewidth LT 480, skin_showbuttons(false), skin_showbuttons(true)); );
	</action>

	<action name="skin_showbuttons">
		set(layer[skin_btn_lt].visible, %1);
		set(layer[skin_btn_rt].visible, %1);
		set(layer[skin_btn_up].visible, %1);
		set(layer[skin_btn_dn].visible, %1);
		set(layer[skin_btn_in].visible, %1);
		set(layer[skin_btn_ou].visible, %1);
		if(%1 == true,
			if(plugin[skin_gyro].available == true, set(layer[skin_btn_gyro].visible, %1) );
			if(device.fullscreensupport, set(layer[skin_btn_fs].visible, %1) );
		  ,
			set(layer[skin_btn_gyro].visible, %1);
			set(layer[skin_btn_fs].visible, %1);
		  );
	</action>

	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
			set(cursceneindex, 0);
			if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
			layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		  );
	</action>

	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);
		if(device.mobile, mul(padding,2));

		if(skin_settings.thumbs_scrollbuttons,
			if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
			if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		  );

		if(skin_settings.thumbs_scrollindicator,
			if(woverflow GT 0,
				set(layer[skin_thumbs_scrollindicator].visible,true);
				sub(iw,pixelwidth,woverflow);
				div(pw,iw,pixelwidth);
				div(px,loverflow,woverflow);
				mul(pw,iw);
				copy(layer[skin_thumbs_scrollindicator].width,pw);
				sub(iw,pw);
				sub(iw,padding);
				sub(iw,padding);
				mul(px,iw);
				add(px,padding);
				copy(layer[skin_thumbs_scrollindicator].x,px);
			  ,
				set(layer[skin_thumbs_scrollindicator].visible,false);
			  );
		  );
	</action>

	<action name="skin_update_scene_infos">
		if(xml.scene !== null,
			if(scene[get(xml.scene)].index GE 0,
				if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
				delayedcall(0.1, set(layer[skin_title].visible,true) );
		
				if(scene[get(xml.scene)].index GT 0,
					set(layer[skin_btn_prev].enabled, true);
					set(layer[skin_btn_prev].alpha, 1.0);
				  ,
					set(layer[skin_btn_prev].enabled, false);
					set(layer[skin_btn_prev].alpha, 0.3);
				  );
		
				sub(lastsceneindex, scene.count, 1);
				if(scene[get(xml.scene)].index LT lastsceneindex,
					set(layer[skin_btn_next].enabled, true);
					set(layer[skin_btn_next].alpha, 1.0);
				  ,
					set(layer[skin_btn_next].enabled, false);
					set(layer[skin_btn_next].alpha, 0.3);
				  );
		
				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(scene[get(xml.scene)].index));
				set(layer[skin_thumbborder].visible, true);
		
				if(scene[get(xml.scene)].mapspotname,
					layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
					layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
				  );
			  );
		  );
	</action>

	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0,
			if(newsceneindex LT scene.count,
				txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
				layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
				loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
			  );
		  );
	</action>

	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name), null, MERGE, BLEND(0.5));
	</action>

	<action name="skin_showloading">
		set(layer[skin_loadingtext].visible, %1);
	</action>

	<action name="skin_buttonglow">
		if(%1 != null,
			set(strength,0.7);
			if(%2 != null, set(strength,%2));
			set(layer[skin_buttonglow].parent, %1);
			set(layer[skin_buttonglow].visible, true);
			tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		  ,
			tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default, set(layer[skin_buttonglow].parent, null); set(layer[skin_buttonglow].visible, false); );
		  );
	</action>

	<action name="skin_hideskin">
		if(layer[skin_map].state != 'closed', skin_showmap(false); wait(0.4); );
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_closed), 0.5, easeOutQuint);
		tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_closed), 0.5, easeOutQuint);
		set(layer[skin_btn_show].visible,true);
		tween(layer[skin_btn_show].alpha, 1, 0.25, easeOutQuint);
	</action>

	<action name="skin_showskin">
		tween(layer[skin_scroll_window].y, get(layer[skin_scroll_window].y_opened), 0.5, easeOutQuint);
		tween(layer[skin_control_bar].y, get(layer[skin_control_bar].y_opened), 0.5, easeOutQuint);
		set(layer[skin_btn_show].visible,false);
		tween(layer[skin_btn_show].alpha,0,0);
	</action>

	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			set(layer[skin_thumbs].state, 'opened');
			add(mh, layer[skin_thumbs].height);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
			set(layer[skin_thumbs_container].visible, true);
			tween(layer[skin_thumbs_container].alpha, 1.0, 0.25);
			tween(layer[skin_map].alpha, 0.0, 0.25, default, set(layer[skin_map].visible,false));
		  ,
			set(layer[skin_thumbs].state, 'closed');
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_thumbs_container].visible, false););
		  );
	</action>

	<action name="skin_showmap">
		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(layer[skin_scroll_layer].y == -100%, copy(layer[skin_scroll_layer].y,mh));
		if(show,
			tween(layer[skin_logo].alpha, 0.0, 0.25, default, set(layer[skin_logo].visible,false));
			tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
			set(layer[skin_map].visible, true);
			tween(layer[skin_map].alpha, 1.0, 0.25);
			set(layer[skin_map].state, 'opened');
			sub(hh,stageheight,skin_settings.controlbar_offset);
			sub(hh,layer[skin_control_bar].height);
			sub(hh,32);
			add(mh,hh);
			copy(layer[skin_map].height, hh);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
		  ,
			set(layer[skin_map].state, 'closed');
			set(layer[skin_logo].visible, true); tween(layer[skin_logo].alpha, 1.0, 0.25);
			tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
		  );
	</action>

	<action name="skin_openlogo">
		if(layer[skin_logo].state == 'small',
			set(layer[skin_logo].state, 'opening');
			copy(backup_logo_align, layer[skin_logo].align);
			copy(backup_logo_x, layer[skin_logo].x);
			copy(backup_logo_y, layer[skin_logo].y);
			copy(backup_logo_scale, layer[skin_logo].scale);
			layer[skin_logo].changeorigin(center);
			tween(layer[skin_logo].x, 0, 0.5, easeOutQuint);
			tween(layer[skin_logo].y, 0, 0.5, easeOutQuint);
			tween(layer[skin_logo].scale, 1, 0.5, easeOutQuint);
			delayedcall(0.5, set(layer[skin_logo].state, 'opened') );
			delayedcall(0, set(events[skin_events].onmouseup, delayedcall(0, skin_closelogo()) ) );
		  );
	</action>

	<action name="skin_closelogo">
		if(layer[skin_logo].state == 'opened',
			set(layer[skin_logo].state, 'closing');
			layer[skin_logo].changeorigin(get(backup_logo_align));
			if(%1 == 'now',
				stoptween(layer[skin_logo].x, layer[skin_logo].y, layer[skin_logo].scale);
				copy(layer[skin_logo].x, backup_logo_x);
				copy(layer[skin_logo].y, backup_logo_y);
				copy(layer[skin_logo].scale, backup_logo_scale);
				set(layer[skin_logo].state, 'small');
			  ,
				tween(layer[skin_logo].x, get(backup_logo_x), 0.5, easeOutQuint);
				tween(layer[skin_logo].y, get(backup_logo_y), 0.5, easeOutQuint);
				tween(layer[skin_logo].scale, get(backup_logo_scale), 0.5, easeOutQuint);
				delayedcall(0.5, set(layer[skin_logo].state, 'small'));
			  );
			set(events[skin_events].onmouseup, null);
		  );
	</action>

	<action name="trace_name">
		trace(name);
	</action>

</krpano>
